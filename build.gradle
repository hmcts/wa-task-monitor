plugins {
  id 'idea'
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.4.1'
  id 'org.owasp.dependencycheck' version '10.0.4'
  id 'uk.gov.hmcts.java' version '0.12.63'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '5.1.0.4882'
  id 'io.freefair.lombok' version '8.10.2'
  id 'info.solidsoft.pitest' version '1.15.0'
  id 'net.serenity-bdd.serenity-gradle-plugin' version '3.2.0'
  id 'au.com.dius.pact' version '4.1.0'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

sourceSets {
  testUtils {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/testUtils/java')
    }
    resources.srcDir file('src/testUtils/resources')
  }

  functionalTest {
    java {
      compileClasspath += testUtils.output
      runtimeClasspath += testUtils.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += testUtils.output
      runtimeClasspath += testUtils.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }

}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
    showStandardStreams = true
  }
}

tasks.withType(Copy) {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  group = "Verification"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task contract(type: Test) {
  description = "Runs the consumer Pact tests"
  group = 'Verification'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

task tests {
  description = "Runs junit , integration and functional tests"
  group = "Verification"
  dependsOn test, integration, smoke, functional
}

task fortifyScan(type: JavaExec) {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

project.ext {
  pacticipant = 'wa_task_monitor'
  pacticipantVersion = getCheckedOutGitCommitHash()
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.18.2'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.40.0"
  sourceSets = [sourceSets.main]
  reportsDir = layout.buildDirectory.dir("reports/pmd").get().asFile
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))
  }
}

pitest {
  junit5PluginVersion = '1.2.1'
  targetClasses = ['uk.gov.hmcts.reform.wataskmonitor.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.wataskmonitor.config.*',
    'uk.gov.hmcts.reform.wataskmonitor.Application'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 80
}

project.tasks['pitest'].group = "Verification"

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

// Ensures that functional tests index page is generated
// Functional tests should run two tasks "functional" and "aggregate"
gradle.startParameter.continueOnFailure = true
functional.finalizedBy aggregate

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: wa-task-monitor"
    property "sonar.projectKey", "uk.gov.hmcts.reform:wa-task-monitor"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation.get().asFile.absolutePath}"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/wataskmonitor/config/**," +
      "src/testUtils/java/uk/gov/hmcts/reform/wataskmonitor/**," +
      "src/main/java/uk/gov/hmcts/reform/wataskmonitor/domain/taskmanagement/request/entities/**," +
      "src/main/java/uk/gov/hmcts/reform/wataskmonitor/Application.java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  //CVE Scanning only relevant to production code that is published, not test or other implementations
  scanConfigurations += 'releaseCompileClasspath'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
    analyzers.ossIndexEnabled = false
  }
}

dependencyManagement {
  dependencies {

    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '33.3.1-jre') {
      entry 'guava'
    }

    // CVE-2021-29425
    dependency group: 'commons-io', name: 'commons-io', version: '2.17.0'

    // CVE-2020-13956 - misinterpret malformed authority component in request URIs - check for update available to com.warrenstrange:googleauth in service-auth-provider-client
    dependency group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'

    //CVE-2021-28170
    dependency group: 'org.glassfish', name: 'jakarta.el', version: '4.0.2'

    //CVE-2022-31692, CVE-2022-31690
    dependencySet( group: 'org.springframework.security', version: '6.4.2'){
      entry 'spring-boot-starter-security'
      entry 'spring-security-core'
      entry 'spring-security-acl'
      entry 'spring-security-aspects'
      entry 'spring-security-cas'
      entry 'spring-security-config'
      entry 'spring-security-crypto'
      entry 'spring-security-data'
      entry 'spring-security-ldap'
      entry 'spring-security-messaging'
      entry 'spring-security-oauth2-client'
      entry 'spring-security-oauth2-core'
      entry 'spring-security-oauth2-jose'
      entry 'spring-security-oauth2-resource-server'
      entry 'spring-security-openid'
      entry 'spring-security-remoting'
      entry 'spring-security-rsocket'
      entry 'spring-security-saml2-service-provider'
      entry 'spring-security-taglibs'
      entry 'spring-security-test'
      entry 'spring-security-web'
      entry 'spring-security-test'
    }

    dependencySet(group: 'ch.qos.logback', version: '1.5.11') {
      entry 'logback-classic'
      entry 'logback-core'
    }

  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

def versions = [
  junit               : '5.11.4',
  junitPlatform       : '1.11.4',
  reformLogging       : '6.1.7',
  springDoc           : '2.6.0',
  serenity            : '3.4.2',
  springFrameworkCloud: '2.2.10.RELEASE',
  pitest              : '1.16.1',
  pactVersion         : '4.1.7',
  tomcat              : '10.1.31'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

//https://nvd.nist.gov/vuln/detail/CVE-2022-25857
ext['snakeyaml.version'] = '2.0'

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-validation:2.7.18'

  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.18.0'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.18.0'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.18.0'

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.2.0'

  implementation group: 'io.github.resilience4j', name: 'resilience4j-spring-boot3', version: '2.2.0'

  implementation group: 'org.springframework.security', name: 'spring-security-rsa', version: '1.1.5'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: versions.springDoc

  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging

  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.2.0'
  implementation group: 'com.github.hmcts', name: 'core-case-data-store-client', version: '4.9.2'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.24.3'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.24.3'

  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: versions.tomcat
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: versions.tomcat

  implementation group: 'org.awaitility', name: 'awaitility', version: '4.2.2'

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: versions.junit
  testImplementation group: 'org.apiguardian', name: 'apiguardian-api', version:'1.1.2'

  testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

  testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
  testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: '1.15.0'
  testImplementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: '0.5'

  testImplementation "org.wiremock:wiremock-jetty12:3.9.2"
  testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.3'
  testImplementation group: 'com.obsidiandynamics.pojotester', name: 'core', version: '0.9.0'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.5'

  testImplementation group: 'com.github.hmcts', name: 'document-management-client', version: '7.0.1'

  implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.9'
  implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

  //Pact contract testing
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pactVersion
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pactVersion

  contractTestImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit)
  contractTestRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit)
  contractTestImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit)

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  testUtilsImplementation sourceSets.main.runtimeClasspath
  testUtilsImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath
}

task runAndPublishConsumerPactTests(type: Test) {
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

runAndPublishConsumerPactTests.finalizedBy pactPublish

pact {
  broker {
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
  }
  publish {
    pactDirectory = 'pacts'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pacticipantVersion
  }
}

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

mainClassName = 'uk.gov.hmcts.reform.wataskmonitor.Application'

bootJar {
  getArchiveFileName().set(provider {
    'wa-task-monitor.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
